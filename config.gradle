import sun.security.krb5.EncryptionKey

project.ext {

    //是否配置当前model 独立
    isModelApp = false
    //独立model名称
    modelName = ""

    //基础配置版本信息等
    compileSdkVersion = 31
    buildToolsVersion = "31.0.0"
    minSdkVersion = 21
    targetSdkVersion = 31
    applicationId = "com.demo.live.app"
    versionCode = 3
    versionName = "1.0.1"


    setAppConfig = {


        extension ->
            {

                //指定为application
                extension.apply plugin: 'com.android.application'
                extension.description "app"

                //公共的apply 主要是用于三方库
                extension.apply plugin: 'kotlin-android'
                extension.apply plugin: 'kotlin-parcelize'
                //   extension.apply plugin: 'kotlin-android-extensions'
                extension.apply plugin: 'kotlin-kapt'

                appImplementation = project.name

                //设置通用Android配置
                setAppOrLibAndroidConfig extension.android
                //设置通用依赖配置
                setDependencies extension.dependencies
            }
    }


    setLibAndroidConfig = { extension ->
        if (project.ext.isModelApp && project.ext.moduleName == project.name) {
            extension.apply plugin: 'com.android.application'
            extension.description "app"
        } else {
            extension.apply plugin: 'com.android.library'
            extension.description "lib"

        }
        extension.apply plugin: 'kotlin-android'
        extension.apply plugin: 'kotlin-parcelize'
        extension.apply plugin: 'kotlin-kapt'

        appImplementation = project.name

        //设置通用Android配置
        setAppOrLibAndroidConfig extension.android
        //设置通用依赖配置
        setDependencies extension.dependencies


    }


    //设置通用的 android配置（可作为project单独调试）
    setAppOrLibAndroidConfig = { extension ->
        extension.compileSdkVersion project.ext.compileSdkVersion
        extension.buildToolsVersion project.ext.buildToolsVersion
        extension.defaultConfig {


            minSdkVersion project.ext.minSdkVersion
            targetSdkVersion project.ext.targetSdkVersion
            versionCode project.ext.versionCode
            versionName project.ext.versionName
            extension.flavorDimensions "versionCode"
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            //ARouter 编译生成路由
//            javaCompileOptions {
//                annotationProcessorOptions {
//                    arguments = [AROUTER_MODULE_NAME: project.getName()]
//                }
//            }


            ndk {
                abiFilters "armeabi-v7a" // 保留这种架构的CPU x32
                abiFilters "arm64-v8a" // 保留这种架构的CPU x64
            }
            kapt {
                arguments {
                    arg("AROUTER_MODULE_NAME", project.getName())
                }
            }
        }

        extension.sourceSets {
            main {
                jniLibs.srcDirs = ['libs']
            }
        }

        //使用的jdk版本
        extension.compileOptions {
            sourceCompatibility JavaVersion.VERSION_11
            targetCompatibility JavaVersion.VERSION_11
        }
        extension.kotlinOptions {
            jvmTarget = '11'
        }


        //动态改变清单文件资源指向
        extension.sourceSets {
            main {
                if (project.ext.isModelApp && project.ext.moduleName == project.name) {
                    manifest.srcFile 'src/main/manifest/AndroidManifest.xml'
                } else {
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                }
            }
        }

        extension.buildFeatures.dataBinding = true
        extension.buildFeatures.viewBinding = true


    }


    //公用的三方库依赖，慎重引入，主要引入基础库依赖
    setDependencies = { extension ->
        extension.implementation fileTree(dir: 'libs', include: ['*.jar'])

        if (appImplementation != "common" && appImplementation != "resources" && appImplementation != "bean") {

            //common做为中间层，所有的Module都要依赖
            extension.api extension.project(path: ':common')
        }

        //针对每个Module单独进行依赖
        switch (appImplementation) {
            case "app":
                extension.api extension.project(path: ':loginModel')
                extension.api extension.project(path: ':userLib')

                //aroute
                extension.kapt 'com.alibaba:arouter-compiler:1.5.2'
                break
            case "loginModel":
                extension.kapt 'com.alibaba:arouter-compiler:1.5.2'
                break
            case "userLib":
                extension.kapt 'com.alibaba:arouter-compiler:1.5.2'
                break
            case "common"://common组件是一个中间层，所有的组件都需要依赖此组件，公共的依赖便可放到这里
                extension.api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
                extension.api 'androidx.constraintlayout:constraintlayout:2.0.1'
                extension.api 'androidx.navigation:navigation-fragment-ktx:2.3.0'
                extension.api 'androidx.navigation:navigation-ui-ktx:2.3.0'
                extension.api 'androidx.core:core-ktx:1.3.1'
                extension.api 'androidx.appcompat:appcompat:1.2.0'
                extension.api 'com.google.android.material:material:1.2.1'
                extension.api 'junit:junit:4.+'
                extension.androidTestApi 'androidx.test.ext:junit:1.1.2'
                extension.androidTestApi 'androidx.test.espresso:espresso-core:3.3.0'

                extension.api 'com.trello.rxlifecycle2:rxlifecycle:2.2.1'
                extension.api 'com.trello.rxlifecycle2:rxlifecycle-android:2.2.1'
                extension.api 'com.trello.rxlifecycle2:rxlifecycle-components:2.2.1'

                extension.api 'androidx.multidex:multidex:2.0.1'
                //状态栏
                extension.api 'com.geyifeng.immersionbar:immersionbar:3.2.2'

                //RX
                extension.api 'io.reactivex.rxjava2:rxjava:2.2.6'
                extension.api 'io.reactivex.rxjava2:rxandroid:2.0.1'
                extension.api 'com.squareup.retrofit2:retrofit:2.6.0'


                extension.api 'androidx.lifecycle:lifecycle-extensions:2.2.0'
                extension.api 'androidx.lifecycle:lifecycle-runtime:2.2.0'
                //   implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'

                // 数据持久化
                extension.api 'com.tencent:mmkv-static:1.2.11'

                extension.api 'io.github.cymchad:BaseRecyclerViewAdapterHelper:3.0.14'
                //路由
                extension.api 'com.alibaba:arouter-api:1.5.2'
                extension.kapt 'com.alibaba:arouter-compiler:1.5.2'


                extension.api extension.project(path: ':resources')
                extension.api extension.project(path: ':bean')
//                extension.api 'com.github.li-xiaojun:XPopup:2.8.3'
                //
                extension.api 'com.google.code.gson:gson:2.8.6'

                //smartrefresh 下拉刷新库
                extension.api 'com.scwang.smart:refresh-layout-kernel:2.0.1'
                extension.api 'com.scwang.smart:refresh-header-classics:2.0.1'
                extension.api 'com.scwang.smart:refresh-header-material:2.0.1'
                extension.api 'com.scwang.smart:refresh-footer-ball:2.0.1'


                extension.api 'com.github.bumptech.glide:glide:4.13.1'


//                extension.api 'com.liulishuo.filedownloader:library:1.7.7'
                break

        }
    }

}